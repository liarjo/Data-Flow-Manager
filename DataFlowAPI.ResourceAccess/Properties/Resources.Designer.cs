//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataFlowAPI.ResourceAccess.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataFlowAPI.ResourceAccess.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $driveLetter = &quot;{DRIVELETTER}&quot;
        ///
        ///$result = New-Object PSObject -Property @{
        ///    Success = $false
        ///    Message = &quot;&quot;
        ///    DiskNumber = 0
        ///    PartitionNumber = 0
        ///    OldDriveLetter = &quot;&quot;
        ///    NewDriveLetter = &quot;&quot;
        ///}
        ///
        ///$partitions = @(Get-Partition | Where { $_.DriveLetter -eq $driveLetter })
        ///$partitions.Count
        ///if ($partitions.Count -gt 0)
        ///{
        ///    $result.Message = &quot;Drive letter &quot; + $driveLetter + &quot; already in use&quot;
        ///}
        ///else
        ///{
        ///    $lastPartition = Get-Partition | Where { $_.DriveLetter } | Sort-Object -Pro [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AttachDiskPsScript {
            get {
                return ResourceManager.GetString("AttachDiskPsScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $azCopyArguments = &apos;{AZCOPYARGUMENTS}&apos;
        ///
        ///$result = New-Object PSObject -Property @{
        ///    Success = $false
        ///    Message = &quot;&quot;
        ///	AzCopyArguments = &quot;&quot;
        ///	AzCopyExitCode = -1
        ///}
        ///
        ///# Install AzCopy on the machine if it is not yet installed
        ///$azCopyPath = ${env:ProgramFiles(x86)} + &apos;\Microsoft SDKs\Azure\AzCopy&apos;
        ///if (-not [Environment]::Is64BitOperatingSystem)
        ///{
        ///    $azCopyPath = ${env:ProgramFiles} + &apos;\Microsoft SDKs\Azure\AzCopy&apos;
        ///}
        ///
        ///if (-not @(Test-Path &quot;$azCopyPath\AzCopy.exe&quot;))
        ///{
        ///    Write-Host &quot;Downlo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CopyFromBlobPsScript {
            get {
                return ResourceManager.GetString("CopyFromBlobPsScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $driveLetter = &quot;{DRIVELETTER}&quot;
        ///$fileSystemLabel = &quot;{FILESYSTEMLABEL}&quot;
        ///$allocationUnitSize = {ALLOCATIONUNITSIZE}
        ///$dataDiskLabel = &quot;{DATADISKLABEL}&quot;
        ///$dataDiskName = &quot;{DATADISKNAME}&quot;
        ///
        ///$result = New-Object PSObject -Property @{
        ///	Success = $false
        ///    Message = &quot;&quot;
        ///	DataDiskName = &quot;&quot;
        ///	DataDiskLabel = &quot;&quot;
        ///    DiskNumber = 0
        ///    DiskUniqueId = &quot;&quot;
        ///    DriveLetter = &quot;&quot;
        ///	FileSystemLabel = &quot;&quot;
        ///	AllocationUnitSize = 0
        ///}
        ///
        ///$result.DataDiskName = $dataDiskName
        ///$result.DataDiskLabel = $dataDiskLabel
        ///
        ///$dis [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateDiskPsScript {
            get {
                return ResourceManager.GetString("CreateDiskPsScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Foreach ($v in Get-Volume)
        ///{
        ///    $record = New-Object PSObject -Property @{
        ///        DriveLetter = $v.DriveLetter
        ///        Size = $v.Size
        ///        SizeRemaining = $v.SizeRemaining
        ///        FileSystemLabel = $v.FileSystemLabel
        ///        DriveInfoFileFound = $false
        ///        DriveInfoFileDataDiskLabel = &quot;&quot;
        ///        DriveInfoFileDriveUniqueId = &quot;&quot;
        ///        DriveInfoFileDriveLetter = &quot;&quot;
        ///        DriveInfoFileFileSystemLabel = &quot;&quot;
        ///    }
        ///
        ///    $driveInfoFile = $null
        ///
        ///    $path = $v.DriveLetter + &quot;:\drive.xml&quot;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetAttachedDriveLettersPsScript {
            get {
                return ResourceManager.GetString("GetAttachedDriveLettersPsScript", resourceCulture);
            }
        }
    }
}
